
export const cobolKeywords: string[] = [
	"accept",
	"access",
	"add",
	"address",
	"advancing",
	"after",
	"all",
	"alphabet",
	"alphabetic-lower",
	"alphabetic-upper",
	"alphabetic",
	"alphanumeric-edited",
	"alphanumeric",
	"also",
	"alter",
	"alternate",
	"and",
	"any",
	"apply",
	"are",
	"area",
	"areas",
	"ascending",
	"assign",
	"at",
	"author",
	"basis",
	"before",
	"beginning",
	"binary",
	"blank",
	"block",
	"bottom",
	"by",
	"call",
	"cancel",
	"cbl",
	"cd",
	"cells",
	"cf",
	"ch",
	"chain",
	"chaining",
	"character",
	"characters",
	"class-id",
	"class",
	"clock-units",
	"close",
	"code-set",
	"code",
	"collating",
	"column",
	"com-reg",
	"comma",
	"common",
	"communication",
	"comp-0",
	"comp-2",
	"comp-3",
	"comp-4",
	"comp-5",
	"comp-6",
	"comp",
	"computational-1",
	"computational-2",
	"computational-3",
	"computational-4",
	"computational-5",
	"computational-6",
	"computational",
	"compute",
	"configuration",
	"constraints",
	"contains",
	"content",
	"continue",
	"control",
	"controls",
	"converting",
	"copy",
	"corr",
	"corresponding",
	"count",
	"currency",
	"data",
	"date-compiled",
	"date-written",
	"day-of-week",
	"day",
	"dbcs",
	"de",
	"debug-contents",
	"debug-item",
	"debug-line",
	"debug-name",
	"debug-sub-1",
	"debug-sub-2",
	"debug-sub-3",
	"debugging",
	"decimal-point",
	"declaratives",
	"declare",
	"delete",
	"delimited",
	"delimiter",
	"depending",
	"descending",
	"destination",
	"detail",
	"display-1",
	"display",
	"divide",
	"division",
	"down",
	"duplicates",
	"dynamic",
	"egcs",
	"egi",
	"eject",
	"else",
	"emi",
	"enable",
	"end-add",
	"end-call",
	"end-chain",
	"end-compute",
	"end-delete",
	"end-display",
	"end-divide",
	"end-evaluate",
	"end-exec",
	"end-if",
	"end-invoke",
	"end-multiply",
	"end-of-page",
	"end-perform",
	"end-read",
	"end-receive",
	"end-return",
	"end-rewrite",
	"end-search",
	"end-start",
	"end-string",
	"end-subtract",
	"end-unstring",
	"end-write",
	"end",
	"enum-id",
	"ending",
	"enter",
	"entry",
	"environment-name",
	"environment-value",
	"environment",
	"eop",
	"equal",
	"equals",
	"error",
	"esi",
	"evaluate",
	"every",
	"exception",
	"exec",
	"exit",
	"extend",
	"external",
	"factory",
	"false",
	"fd",
	"file-control",
	"file",
	"filler",
	"final",
	"first",
	"footing",
	"for",
	"from",
	"function",
	"generate",
	"giving",
	"global",
	"go",
	"goback",
	"greater",
	"group",
	"heading",
	"high-value",
	"high-values",
	"i-o-control",
	"i-o",
	"id",
	"identification",
	"if",
	"in",
	"index",
	"indexed",
	"indicate",
	"inherits",
	"initial",
	"interface-id",
	"initialize",
	"initiate",
	"input-output",
	"input",
	"insert",
	"inspect",
	"installation",
	"into",
	"invalid",
	"invoke",
	"is",
	"just",
	"justified",
	"kanjikey",
	"kept",
	"label",
	"last",
	"leading",
	"left",
	"length",
	"less",
	"limit",
	"limits",
	"linage-counter",
	"linage",
	"line-counter",
	"line",
	"lines",
	"linkage",
	"local-storage",
	"lock",
	"low-value",
	"low-values",
	"memory",
	"merge",
	"message",
	"metaclass",
	"method-id",
	"method",
	"mode",
	"modules",
	"more-labels",
	"move",
	"multiple",
	"multiply",
	"native_binary",
	"native",
	"negative",
	"next",
	"no",
	"not",
	"null",
	"nulls",
	"number",
	"numeric-edited",
	"numeric",
	"object-computer",
	"object",
	"occurs",
	"of",
	"off",
	"omitted",
	"on",
	"open",
	"optional",
	"or",
	"order",
	"organization",
	"other",
	"output",
	"overflow",
	"override",
	"packed-decimal",
	"padding",
	"page-counter",
	"page",
	"password",
	"perform",
	"pf",
	"ph",
	"pic",
	"picture",
	"plus",
	"pointer",
	"position",
	"positive",
	"printing",
	"procedure-pointer",
	"procedure",
	"procedures",
	"proceed",
	"processing",
	"program-id",
	"program",
	"purge",
	"queue",
	"quote",
	"quotes",
	"random",
	"rd",
	"read",
	"ready",
	"receive",
	"record",
	"recording",
	"records",
	"recursive",
	"redefines",
	"redefines",
	"reel",
	"reference",
	"references",
	"relative",
	"release",
	"reload",
	"remainder",
	"remarks",
	"removal",
	"renames",
	"replace",
	"replacing",
	"report",
	"reporting",
	"reports",
	"repository",
	"rerun",
	"reserve",
	"reset",
	"return-code",
	"return",
	"returning",
	"reversed",
	"rewind",
	"rewrite",
	"rf",
	"rh",
	"right",
	"rounded",
	"run",
	"same",
	"sd",
	"search",
	"section",
	"security",
	"segment-limit",
	"segment",
	"select",
	"self",
	"send",
	"sentence",
	"separate",
	"sequence",
	"sequential",
	"service",
	"set",
	"shift-in",
	"shift-out",
	"sign",
	"size",
	"skip1",
	"skip2",
	"skip3",
	"sort-control",
	"sort-core-size",
	"sort-file-size",
	"sort-merge",
	"sort-message",
	"sort-mode-size",
	"sort-return",
	"sort",
	"source-computer",
	"source",
	"space",
	"spaces",
	"special-names",
	"standard-1",
	"standard-2",
	"standard",
	"start",
	"static",
	"status",
	"stop",
	"string",
	"sub-queue-1",
	"sub-queue-2",
	"sub-queue-3",
	"subtract",
	"sum",
	"super",
	"suppress",
	"symbolic",
	"sync",
	"synchronized",
	"table",
	"tally",
	"tallying",
	"tape",
	"terminal",
	"terminate",
	"test",
	"text",
	"than",
	"then",
	"thread-local",
	"through",
	"thru",
	"time",
	"times",
	"title",
	"to",
	"top",
	"trace",
	"trailing",
	"true",
	"type",
	"unit",
	"unstring",
	"until",
	"up",
	"upon",
	"usage",
	"use",
	"using",
	"value",
	"values",
	"varying",
	"when-compiled",
	"when",
	"with",
	"words",
	"working-storage",
	"write-only",
	"write",
	"zero",
	"zeroes",
	"zeros"
];

const acuKeywords: string[] = [
	"3-d",
	"active-x-control",
	"activex-res",
	"acuactivexcontrol",
	"alignment",
	"assembly-name",
	"auto-minimize",
	"auto-resize",
	"bind",
	"box",
	"cancel-button",
	"cell",
	"cells",
	"center",
	"centered-headings",
	"century-date",
	"century-day",
	"chart",
	"cline",
	"clines",
	"clsid",
	"color",
	"column-headings",
	"compression",
	"csize",
	"cursor-frame-width",
	"cycle",
	"data-columns",
	"default-font",
	"default-interface",
	"default-source",
	"destroy",
	"display-columns",
	"divider-color",
	"drag-color",
	"end-modify",
	"end-move",
	"end-use",
	"end-wait",
	"engraved",
	"entry-field",
	"erase",
	"event",
	"file-path",
	"file-prefix",
	"frame",
	"grid",
	"heading-color",
	"heading-divider-color",
	"height",
	"help-id",
	"icon",
	"id",
	"identified",
	"independent",
	"initial-state",
	"inquire",
	"label-offset",
	"label",
	"large-font",
	"layout-data",
	"link",
	"list-box",
	"lower",
	"manual",
	"mass-update",
	"menu",
	"message",
	"modal",
	"modeless",
	"modify",
	"newline",
	"no-tab",
	"num-rows",
	"numeric-fill",
	"only",
	"overlapped",
	"page-layout-screen",
	"paragraph",
	"pixel",
	"pixels",
	"pop-up",
	"previous",
	"primary-interface",
	"priority",
	"push-button",
	"radio-button",
	"record-data",
	"record-position",
	"report-composer",
	"resizeable",
	"resource",
	"scroll",
	"self-act",
	"separation",
	"strong-name",
	"style",
	"system",
	"thread",
	"threads",
	"tiled-headings",
	"title-bar",
	"title",
	"tool-bar",
	"transaction-status",
	"unsorted",
	"upper",
	"user-gray",
	"vpadding",
	"vscroll",
	"wide",
	"width",
	"wrap"
];

export const cobolStorageKeywords: string[] = [
	"binary-char",
	"binary-double",
	"binary-long",
	"binary-short",
	"boolean",
	"character",
	"comp-1",
	"comp-2",
	"comp-3",
	"comp-4",
	"comp-5",
	"comp-n",
	"comp-x",
	"comp",
	"computational-1",
	"computational-2",
	"computational-3",
	"computational-4",
	"computational-5",
	"computational-n",
	"computational-x",
	"computational",
	"conditional-value",
	"constant",
	"decimal",
	"external",
	"float-long",
	"float-short",
	"low-value",
	"low-values",
	"occurs",
	"pic",
	"picture",
	"property",
	"redefines",
	"sign",
	"signed-int",
	"signed-long",
	"signed-short",
	"signed",
	"unsigned",
	"value",
	"values",
	"when",
	"zero",
	"zeroes",
	"zeros"
];

export const cobolRegisters: string[] = [
	"address-of",
	"debug-item",
	"jnienvptr",
	"json-code",
	"json-status",
	"return-code",
	"sort-control",
	"sort-core-size",
	"sort-file-size",
	"sort-message",
	"sort-mode-size",
	"sort-return",
	"tally",
	"when-compiled",
	"xml-code",
	"xml-code",
	"xml-event",
	"xml-information",
	"xml-namespace-prefix",
	"xml-namespace",
	"xml-nnamespace-prefix",
	"xml-nnamespace",
	"xml-ntext",
	"xml-text"
];

export const cobolProcedureKeywords: string[] = [
	"accept",
	"add",
	"address",
	"advancing",
	"after",
	"all",
	"also",
	"alter",
	"alternate",
	"and",
	"apply",
	"at",
	"call",
	"cancel",
	"chain",
	"close",
	"compute",
	"controls",
	"count",
	"declare",
	"delete",
	"delimited",
	"delimiter",
	"depending",
	"detail",
	"display",
	"divide",
	"eject",
	"else",
	"end-add",
	"end-call",
	"end-chain",
	"end-compute",
	"end-delete",
	"end-display",
	"end-divide",
	"end-evaluate",
	"end-exec",
	"end-if",
	"end-invoke",
	"end-multiply",
	"end-of-page",
	"end-perform",
	"end-read",
	"end-receive",
	"end-return",
	"end-rewrite",
	"end-search",
	"end-start",
	"end-string",
	"end-subtract",
	"end-unstring",
	"end-write",
	"end",
	"entry",
	"equal",
	"error",
	"evaluate",
	"every",
	"exec",
	"exit",
	"external",
	"false",
	"function",
	"giving",
	"go",
	"goback",
	"greater",
	"high-value",
	"high-values",
	"if",
	"initialize",
	"initiate",
	"insert",
	"inspect",
	"into",
	"invoke",
	"method-id",
	"method",
	"move",
	"multiple",
	"multiply",
	"object-computer",
	"object",
	"perform",
	"release",
	"replace",
	"replacing",
	"return-code",
	"returning",
	"rewind",
	"rewrite",
	"search",
	"section",
	"self",
	"sentence",
	"set",
	"space",
	"spaces",
	"stop",
	"string",
	"subtract",
	"sum",
	"super",
	"tally",
	"tallying",
	"than",
	"then",
	"through",
	"thru",
	"time",
	"times",
	"unit",
	"unstring",
	"until",
	"varying",
	"write"
];

const cobolKeywordDictionaryMap = new Map<string, string>();
const acucobolKeywordDictionaryMap = new Map<string, string>();
export const cobolProcedureKeywordDictionary = new Map<string, string>();
export const cobolStorageKeywordDictionary = new Map<string, string>();
export const cobolRegistersDictionary = new Map<string, string>();

const cobolList: string[] = [];
const acucobolList: string[] = [];

/* inline decl */
for (const key of cobolKeywords) {
	cobolKeywordDictionaryMap.set(key, key);
	acucobolKeywordDictionaryMap.set(key, key);
	cobolList.push(key);
	acucobolList.push(key);
}

for (const key of acuKeywords) {
	if (!acucobolKeywordDictionaryMap.has(key)) {
		acucobolKeywordDictionaryMap.set(key, key);
		acucobolList.push(key);
	}
}

for (const key of cobolProcedureKeywords) {
	if (!cobolProcedureKeywordDictionary.has(key)) {
		cobolProcedureKeywordDictionary.set(key, key);
		cobolList.push(key);
		acucobolList.push(key);
	}
}

for (const key of cobolStorageKeywords) {
	if (!cobolStorageKeywordDictionary.has(key)) {
		cobolStorageKeywordDictionary.set(key, key);
		cobolList.push(key);
		acucobolList.push(key);
	}
}

for (const key of cobolRegisters) {
	if (!cobolRegistersDictionary.has(key)) {
		cobolRegistersDictionary.set(key, key);
		cobolList.push(key);
		acucobolList.push(key);
	}
}

export function getCOBOLKeywordDictionary(dialect: string): Map<string, string> {
	if (dialect === "ACUCOBOL") {
		return acucobolKeywordDictionaryMap;
	}
	return cobolKeywordDictionaryMap;
}

export function getCOBOLKeywordList(dialect: string): string[] {
	return dialect === "ACUCOBOL" ? acucobolList : cobolList;
}