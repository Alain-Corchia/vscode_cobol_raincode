{
	"add": {
		"prefix": "add",
		"body": [
			"add ${1:a} to ${2:b} giving ${3:c}"
		],
		"description": "Add a to b giving c",
		"scope": "cobolit"
	},
	"ADD": {
		"prefix": "ADD",
		"body": [
			"ADD ${1:a} TO ${2:b} GIVING ${3:c}"
		],
		"description": "Add a to b giving c",
		"scope": "cobolit"
	},
	"accept": {
		"prefix": "accept",
		"body": [
			"accept ${1:variable}",
			"$0"
		],
		"scope": "cobolit"
	},
	"ACCEPT": {
		"prefix": "ACCEPT",
		"body": [
			"ACCEPT ${1:variable}",
			"$0"
		],
		"scope": "cobolit"
	},
	"accept from": {
		"prefix": "accept",
		"body": [
			"accept ${1:variable} ${2|from date,from day,from day-of-week,time|}",
			"$0"
		],
		"description": "accept from date/day/week/time",
		"scope": "cobolit"
	},
	"ACCEPT FROM": {
		"prefix": "ACCEPT",
		"body": [
			"ACCEPT ${1:variable} ${2|FROM DATE,FROM DAY,FROM DAY-OF-WEEK,TIME|}",
			"$0"
		],
		"description": "ACCEPT FROM DATE/DAY/WEEK/TIME",
		"scope": "cobolit"
	},
	"copy": {
		"prefix": "copy",
		"body": [
			"copy \"${1:subprog.cpy}\"",
			"    replacing ==${2:()}== by ==${3:lnk-}==."
		],
		"description": "Copy replacing",
		"scope": "cobolit"
	},
	"COPY": {
		"prefix": "COPY",
		"body": [
			"COPY \"${1:SUBPROG.CPY}\"",
			"    REPLACING ==${2:()}== BY ==${3:lnk-}==."
		],
		"description": "COPY REPLACING",
		"scope": "cobolit"
	},
	"delimited": {
		"prefix": [
			"delimited by size",
			"dbs"
		],
		"body": [
			"delimited by size"
		],
		"description": "delimited by size (string)",
		"scope": "cobolit"
	},
	"DELIMITED": {
		"prefix": [
			"DELIMITED BY SIZE",
			"DBS"
		],
		"body": [
			"DELIMITED BY SIZE"
		],
		"description": "DELIMITED BY SIZE (string)",
		"scope": "cobolit"
	},
	"delimited_space": {
		"prefix": [
			"delimited by space",
			"ds"
		],
		"body": [
			"delimited by space"
		],
		"description": "delimited by size (string)",
		"scope": "cobolit"
	},
	"DELIMITED_SPACE": {
		"prefix": [
			"DELIMITED BY SPACE",
			"DS"
		],
		"body": [
			"DELIMITED BY SPACE"
		],
		"description": "DELIMITED BY SPACE (string)",
		"scope": "cobolit"
	},
	"divide": {
		"prefix": [
			"divide",
			"dgr"
		],
		"body": [
			"divide ${1:a} by ${2:b} giving ${3:c} ${4:remainder ${5:d}}"
		],
		"description": "divide a by b giving [remainder}",
		"scope": "cobolit"
	},
	"DIVIDE": {
		"prefix": [
			"DIVIDE",
			"DGR"
		],
		"body": [
			"DIVIDE ${1:a} BY ${2:b} GIVING ${3:c} ${4:REMAINDER ${5:d}}"
		],
		"description": "DIVIDE a BY b GIVING [REMAINDER}",
		"scope": "cobolit"
	},
	"entry": {
		"prefix": [
			"entry",
			"eg"
		],
		"body": [
			"$1-ep section.",
			"entry \"$1\".",
			"    $0\t",
			"    goback.",
			""
		],
		"description": "entry statement",
		"scope": "cobolit"
	},
	"ENTRY": {
		"prefix": [
			"ENTRY",
			"GB"
		],
		"body": [
			"$1-EP SECTON.",
			"ENTRY \"$1\".",
			"    $0\t",
			"    GOBACK.",
			""
		],
		"description": "ENTRY statement",
		"scope": "cobolit"
	},
	"enum-id": {
		"prefix": [
			"enum-id",
			"ei"
		],
		"body": [
			"*>> <summary>enum-id $1</summary>",
			"enum-id. $1 as \"Status\".",
			"    78 ${2:Item}  value ${3:1}.",
			"end enum $1.",
			""
		],
		"description": "enum-id",
		"scope": "cobolit"
	},
	"evaluate": {
		"prefix": [
			"evaluate",
			"ee"
		],
		"body": [
			"evaluate $1",
			"    when $2",
			"       $0",
			"    when other",
			"       continue",
			"end-evaluate",
			""
		],
		"description": "evaluate",
		"scope": "cobolit"
	},
	"EVALUATE": {
		"prefix": "EVALUATE",
		"body": [
			"EVALUATE $1",
			"    WHEN $2",
			"       $0",
			"    WHEN OTHER",
			"       CONTINUE",
			"END-EVALUATE",
			""
		],
		"description": "EVALUATE",
		"scope": "cobolit"
	},
	"exec-sql": {
		"prefix": "exec",
		"body": [
			"exec sql include sqlca end-exec."
		],
		"description": "exec sql include",
		"scope": "cobolit"
	},
	"exec-sql-begin": {
		"prefix": "exec",
		"body": [
			"exec sql begin declare section end-exec.",
			"$0",
			"exec sql end declare section end-exec."
		],
		"description": "exec sql declare",
		"scope": "cobolit"
	},
	"if": {
		"prefix": [
			"if",
			"ie"
		],
		"body": [
			"if ${1:condition}",
			"   $0",
			"end-if"
		],
		"scope": "cobolit"
	},
	"IF": {
		"prefix": [
			"IF",
			"ie"
		],
		"body": [
			"IF ${1:CONDITION}",
			"   $0",
			"END-IF"
		],
		"scope": "cobolit"
	},
	"if else": {
		"prefix": [
			"if",
			"iee"
		],
		"body": [
			"if ${1:condition}",
			"   $0",
			"else",
			"   ",
			"end-if"
		],
		"scope": "cobolit"
	},
	"IF ELSE": {
		"prefix": [
			"IF",
			"IEE"
		],
		"body": [
			"IF ${1:CONDITION}",
			"   $0",
			"ELSE",
			"   ",
			"END-IF"
		],
		"scope": "cobolit"
	},
	"inspect converting": {
		"prefix": "inspect",
		"body": [
			"inspect $1 converting '${2:ABCDEFGHIJKLMNOPQRSTUVWXYZ}' to '${3:abcdefghijklmnopqrstuvwxyz}'"
		],
		"description": "inspect converting",
		"scope": "cobolit"
	},
	"INSPECT CONVERTING": {
		"prefix": "INSPECT",
		"body": [
			"INSPECT $1 CONVERTING '${2:ABCDEFGHIJKLMNOPQRSTUVWXYZ}' to '${3:abcdefghijklmnopqrstuvwxyz}'"
		],
		"description": "INSPECT CONVERTING",
		"scope": "cobolit"
	},
	"inspect replacing": {
		"prefix": "inspect",
		"body": [
			"inspect $1 replacing all ${2|spaces,zero|} by '${3}'"
		],
		"description": "inspect replacing",
		"scope": "cobolit"
	},
	"INSPECT REPLACING": {
		"prefix": "INSPECT",
		"body": [
			"INSPECT $1 REPLACING ALL ${2|SPACES,ZERO|} BY '${3}'"
		],
		"description": "INSPECT REPLACING",
		"scope": "cobolit"
	},
	"inspect tallying": {
		"prefix": "inspect",
		"body": [
			"move 0 to ${2:counter}",
			"inspect ${1:source} tallying ${2:counter} for ${3|all spaces,all $4,characters|}"
		],
		"description": "Inspect a tallying counter for ...",
		"scope": "cobolit"
	},
	"INSPECT TALLYING": {
		"prefix": "INSPECT",
		"body": [
			"MOVE 0 to ${2:COUNTER}",
			"INSPECT ${1:SOURCE} TALLYING ${2:COUNTER} FOR ${3|ALL SPACES,ALL $4,CHARACTERS|}"
		],
		"description": "Inspect a tallying counter for ...",
		"scope": "cobolit"
	},
	"multiply": {
		"prefix": [
			"multiply",
			"mg"
		],
		"body": [
			"multiply ${1:a} by ${2:b} giving ${3:c}"
		],
		"description": "Multiply a by y giving z",
		"scope": "cobolit"
	},
	"MULTIPLY": {
		"prefix": [
			"MULTIPLY",
			"MG"
		],
		"body": [
			"MULTIPLY ${1:a} BY ${2:b} GIVING ${3:c}"
		],
		"description": "MULTIPLY a BY y GIVING z",
		"scope": "cobolit"
	},
	"perform": {
		"prefix": [
			"perform",
			"pt"
		],
		"body": [
			"perform ${1:paragraph-name} ${2:value-1} times"
		],
		"description": "perform paragraph x times",
		"scope": "cobolit"
	},
	"PERFORM": {
		"prefix": [
			"PERFORM",
			"PE"
		],
		"body": [
			"PERFORM ${1:paragraph-name} ${2:value-1} TIMES"
		],
		"description": "PERFORM paragraph x TIMES",
		"scope": "cobolit"
	},
	"perform-end-perform": {
		"prefix": [
			"perform",
			"pe"
		],
		"body": [
			"perform ${1}",
			"\t${2}",
			"end-perform",
			"${0}"
		],
		"description": "perform .. end-perform",
		"scope": "cobolit"
	},
	"PERFORM-END-PERFORM": {
		"prefix": [
			"PERFORM",
			"PE"
		],
		"body": [
			"PERFORM ${1}",
			"\t${2}",
			"END-PERFORM",
			"${0}"
		],
		"description": "PERFORM .. END-PERFORM",
		"scope": "cobolit"
	},
	"perform varying": {
		"prefix": [
			"perform",
			"pv"
		],
		"body": [
			"perform ${1:paragraph-name} varying ${2:field-1}",
			" from ${3:value-1} by ${4:value-2}",
			" until ${5:condition}",
			"$0"
		],
		"description": "inline perform varying",
		"scope": "cobolit"
	},
	"PERFORM VARYING": {
		"prefix": [
			"PERFORM",
			"PV"
		],
		"body": [
			"PERFORM ${1:paragraph-name} VARYING ${2:field-1}",
			" FROM ${3:value-1} BY ${4:value-2}",
			" UNTIL ${5:condition}",
			"$0"
		],
		"description": "INLINE PERFORM VARYING",
		"scope": "cobolit"
	},
	"Minimum Line Sequential": {
		"prefix": "identification",
		"body": [
			"       identification division.",
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       input-output section.",
			"        file-control.",
			"        select ${2:cust} assign to '${4:$2}.txt'",
			"        organization is line sequential.            ",
			"",
			"       data division.",
			"       file section.",
			"       fd $2.",
			"       01 ${3:$2-file}.",
			"        03 ${5:customer-id}    pic 9(5).",
			"        03 ${6:customer-info}  pic x(65).",
			"",
			"       working-storage section.",
			"       01 ws-eof       pic a. ",
			"",
			"       procedure division.",
			"          open input $2.",
			"             perform until ws-eof='Y'",
			"                read $2",
			"                   at end",
			"                      move 'Y' to ws-eof",
			"                   not at end",
			"                      display ${5} \" => \" ${6}",
			"                end-read",
			"             end-perform",
			"          close $2.",
			"          $0",
			"          goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template File/Seq",
		"scope": "cobolit"
	},
	"Skelton program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       configuration section.",
			"",
			"       data division.",
			"       working-storage section.",
			"",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Small template for program",
		"scope": "cobolit"
	},
	"Minimum program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template",
		"scope": "cobolit"
	},
	"END PROGRAM": {
		"prefix": "END PROGRAM",
		"body": [
			"END PROGRAM ${1:${TM_FILENAME/(.*)\\..+$/$1/}}."
		],
		"description": "END PROGRAM prg.",
		"scope": "cobolit"
	},
	"end program": {
		"prefix": "end program",
		"body": [
			"end program ${1:${TM_FILENAME/(.*)\\..+$/$1/}}."
		],
		"description": "end program ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
		"scope": "cobolit"
	},
	"subtract": {
		"prefix": "subtract",
		"body": [
			"subtract ${1:a} from ${2:b} giving ${3:c}"
		],
		"description": "subtract a from b giving c",
		"scope": "cobolit"
	},
	"SUBTRACT": {
		"prefix": "SUBTRACT",
		"body": [
			"SUBTRACT ${1:a} FROM ${2:b} GIVING ${3:c}"
		],
		"description": "SUBTRACT a FROM b GIVING c",
		"scope": "cobolit"
	},
	"display": {
		"prefix": "display",
		"body": [
			"display \"$0\""
		],
		"description": "display literal",
		"scope": "cobolit"
	},
	"DISPLAY": {
		"prefix": "DISPLAY",
		"body": [
			"DISPLAY \"$0\""
		],
		"description": "DISPLAY literal",
		"scope": "cobolit"
	},
	"select-to-section": {
		"prefix": "perform",
		"body": [
			"$1 section.",
			"   $TM_SELECTED_TEXT",
			"$1-end section.",
			"   exit section."
		],
		"description": "select-tosection",
		"scope": "cobolit"
	},
	"string": {
		"prefix": "string",
		"body": [
			"string ${1:item1} delimited by size",
			"       ${2:item2} delimited by size",
			"       into ${3:result}",
			"end-string",
			"$0"
		],
		"description": "string delimited by size",
		"scope": "cobolit"
	},
	"STRING": {
		"prefix": "STRING",
		"body": [
			"STRING ${1:item1} DELIMITED BY SIZE",
			"       ${2:item2} DELIMITED BY SIZE",
			"       INTO ${3:result}",
			"END-STRING",
			"$0"
		],
		"description": "string delimited by size",
		"scope": "cobolit"
	},
	"function-abs": {
		"prefix": [
			"function abs"
		],
		"body": [
			"function abs(${1:number})$0"
		],
		"description": "function absolute value of number",
		"scope": "cobolit"
	},
	"function-acos": {
		"prefix": [
			"function acos"
		],
		"body": [
			"function acos(${1:cosine})$0"
		],
		"description": "function trigonometric arc-cosine, or inverse cosine, of cosine",
		"scope": "cobolit"
	},
	"function-annuity": {
		"prefix": [
			"function annuity"
		],
		"body": [
			"function annuity(${1:interest-rate},${2:number-of-periods})$0"
		],
		"description": "function annuity",
		"scope": "cobolit"
	},
	"function-asin": {
		"prefix": [
			"function asin"
		],
		"body": [
			"function asin(${1:sine})$0"
		],
		"description": "function trigonometric arc-sine, or inverse sine, of sine",
		"scope": "cobolit"
	},
	"function-atan": {
		"prefix": [
			"function atan"
		],
		"body": [
			"function atan(${1:tangent})$0"
		],
		"description": "function trigonometric arc-tangent, or inverse tangent, of tangent",
		"scope": "cobolit"
	},
	"function-boolean-of-integer": {
		"prefix": [
			"function boolean-of-integer"
		],
		"body": [
			"function boolean-of-integer(${1:integer},${2:length})$0"
		],
		"description": "function boolean item of usage bit representing the binary value of integer; with the given length",
		"scope": "cobolit"
	},
	"function-byte-length": {
		"prefix": [
			"function byte-length"
		],
		"body": [
			"function byte-length(${1:integer})$0"
		],
		"description": "function byte-length (in bytes) of item",
		"scope": "cobolit"
	},
	"function-char": {
		"prefix": [
			"function char"
		],
		"body": [
			"function char(${1:integer})$0"
		],
		"description": "function character in the ordinal position specified by integer, from the current alphanumeric collating sequence",
		"scope": "cobolit"
	},
	"function-char-national": {
		"prefix": [
			"function char-national"
		],
		"body": [
			"function char-national(${1:integer})$0"
		],
		"description": "function character in the ordinal position specified by &lt;integer&gt; from the current national collating sequence",
		"scope": "cobolit"
	},
	"function-combined-datetime": {
		"prefix": [
			"function combined-datetime"
		],
		"body": [
			"function combined-datetime(${1:integer-date},${2:standard-numeric-time})$0"
		],
		"description": "function combines integer-date and standard-numeric-time into a single numeric item from which both date and time components can be derived",
		"scope": "cobolit"
	},
	"function-concatenate": {
		"prefix": [
			"function concatenate"
		],
		"body": [
			"function concatenate(${1:string1},${2:string2})$0"
		],
		"description": "function concatenates the string1.. string2 into a single string result",
		"scope": "cobolit"
	},
	"function-cos": {
		"prefix": [
			"function cos"
		],
		"body": [
			"function cos(${1:angle})$0"
		],
		"description": "function trigonometric cosine of angle",
		"scope": "cobolit"
	},
	"function-currency-symbol": {
		"prefix": [
			"function currency-symbol"
		],
		"body": [
			"function currency-symbol()$0"
		],
		"description": "function currency symbol character currently in effect for the locale under which the program is running",
		"scope": "cobolit"
	},
	"function-current-date": {
		"prefix": [
			"function current-date"
		],
		"body": [
			"function current-date(${1:date-and-time-format})$0"
		],
		"description": "function current date and time as 21-character value",
		"scope": "cobolit"
	},
	"function-formatted-date": {
		"prefix": [
			"function formatted-date"
		],
		"body": [
			"function formatted-date(${1:date-format},${2:integer-date})$0"
		],
		"description": "function formatted-date",
		"scope": "cobolit"
	},
	"function-formatted-datetime": {
		"prefix": [
			"function formatted-datetime"
		],
		"body": [
			"function formatted-datetime(${1:date-and-time-format},${2:integer-date},${3:standard-numeric-time},${4:offset_or_system_offset})$0"
		],
		"description": "function formatted-datetime",
		"scope": "cobolit"
	},
	"Function-formatted-time": {
		"prefix": [
			"function formatted-time"
		],
		"body": [
			"function formatted-time(${1:time-format},${2:standard-numeric-time},${3:offset_or_system_offset})$0"
		],
		"description": "function formatted-time",
		"scope": "cobolit"
	},
	"function-fraction-part": {
		"prefix": [
			"function fraction-part"
		],
		"body": [
			"function fraction-part(${1:number})$0"
		],
		"description": "portion of number that occurs to the right of the decimal point",
		"scope": "cobolit"
	},
	"function-highest-algebraic": {
		"prefix": [
			"function highest-algebraic"
		],
		"body": [
			"function highest-algebraic(${1:numeric-identifier})$0"
		],
		"description": "highest value that could possibly be stored in the specified numeric-identifier",
		"scope": "cobolit"
	},
	"function-integer": {
		"prefix": [
			"function integer"
		],
		"body": [
			"function integer(${1:number})$0"
		],
		"description": "greatest integer value that is less than or equal to number",
		"scope": "cobolit"
	},
	"function-integer-of-boolean": {
		"prefix": [
			"function integer-of-boolean"
		],
		"body": [
			"dunction integer-of-boolean(${1:boolean-item})$0"
		],
		"description": "numeric value of boolean-item",
		"scope": "cobolit"
	},
	"function-integer-of-date": {
		"prefix": [
			"function integer-of-date"
		],
		"body": [
			"function integer-of-date(${1:yyyymmdd})$0"
		],
		"description": "converts yyyymmdd to an internal integer-date",
		"scope": "cobolit"
	},
	"function-integer-of-day": {
		"prefix": [
			"function integer-of-day"
		],
		"body": [
			"function integer-of-day(${1:yyyymmdd})$0"
		],
		"description": "converts yyyymmdd to an internal integer-day",
		"scope": "cobolit"
	},
	"function-integer-of-formatted-date": {
		"prefix": [
			"function integer-of-formatted-date"
		],
		"body": [
			"function integer-of-formatted-date(${1:format},${2:date})$0"
		],
		"description": "converts date in specified format to an internal integer",
		"scope": "cobolit"
	},
	"function-integer-part": {
		"prefix": [
			"function integer-part"
		],
		"body": [
			"function integer-part(${1:number})$0"
		],
		"description": "portion of number that occurs to the left of the decimal point",
		"scope": "cobolit"
	},
	"function-length": {
		"prefix": [
			"function length"
		],
		"body": [
			"function length(${1:item})$0"
		],
		"description": "returns the length (in character positions) of the specified item",
		"scope": "cobolit"
	},
	"function-length-an": {
		"prefix": [
			"function length-an"
		],
		"body": [
			"function length-an(${1:item})$0"
		],
		"description": "returns the length (in bytes) of the specified item;",
		"scope": "cobolit"
	},
	"function-locale-compare": {
		"prefix": [
			"function locale-compare"
		],
		"body": [
			"function locale-compare(${1:argument1},${2:argument2},${3:locale-optional})$0"
		],
		"description": "character '=' or '<' or '>' indicating the result of comparing argument1 and argument2 using a culturall",
		"scope": "cobolit"
	},
	"function-locale-date": {
		"prefix": [
			"function locale-date"
		],
		"body": [
			"function locale-date(${1:yyyymmdd},${2:locale-optional})$0"
		],
		"description": "format yyyymmd; according to locale",
		"scope": "cobolit"
	},
	"function-locale-time": {
		"prefix": [
			"function locale-time"
		],
		"body": [
			"function locale-time(${1:yyyymmdd},${2:locale-optional})$0"
		],
		"description": "format time; according to locale",
		"scope": "cobolit"
	},
	"function-locale-time-from-seconds": {
		"prefix": [
			"function locale-time-from-seconds"
		],
		"body": [
			"function locale-time-from-seconds(${1:integer-time},${2:locale-optional})$0"
		],
		"description": "format integer-time (internal-format) according to locale",
		"scope": "cobolit"
	},
	"function-log": {
		"prefix": [
			"function log"
		],
		"body": [
			"function log(${1:number})$0"
		],
		"description": "format base e logarithm of number",
		"scope": "cobolit"
	},
	"function-log10": {
		"prefix": [
			"function log10"
		],
		"body": [
			"function log10(${1:number})$0"
		],
		"description": "format base 10 logarithm of number",
		"scope": "cobolit"
	},
	"function-lowercase": {
		"prefix": [
			"function lowercase"
		],
		"body": [
			"function lowercase(${1:string})$0"
		],
		"description": "character string that contains string with any uppercase letters replaced by their corresponding lowercase letters",
		"scope": "cobolit"
	},
	"function-lowest-algebraic": {
		"prefix": [
			"function lowest-algebraic"
		],
		"body": [
			"function lowest-algebraic(${1:numeric-identifier})$0"
		],
		"description": "lowest value that could possibly be stored in the specified numeric-identifier",
		"scope": "cobolit"
	},
	"function-max": {
		"prefix": [
			"function max"
		],
		"body": [
			"function max(${1:number},${2:...})$0"
		],
		"description": "Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers",
		"scope": "cobolit"
	},
	"function-mean": {
		"prefix": [
			"function mean"
		],
		"body": [
			"function mean(${1:number},${2:...})$0"
		],
		"description": "statistical mean value of the specified list of numbers",
		"scope": "cobolit"
	},
	"function-median": {
		"prefix": [
			"function median"
		],
		"body": [
			"function median(${1:number},${2:...})$0"
		],
		"description": "statistical median value of the specified list of numbers",
		"scope": "cobolit"
	},
	"function-midrange": {
		"prefix": [
			"function midrange"
		],
		"body": [
			"function midrange(${1:number},${2:...})$0"
		],
		"description": "statistical midrange value of the specified list of numbers",
		"scope": "cobolit"
	},
	"function-min": {
		"prefix": [
			"function min"
		],
		"body": [
			"function min(${1:number},${2:...})$0"
		],
		"description": "statistical min value of the specified list of numbers",
		"scope": "cobolit"
	},
	"function-mod": {
		"prefix": [
			"function mod"
		],
		"body": [
			"function mod(${1:value},${2:modulus})$0"
		],
		"description": "remainder from the division of value by modulus",
		"scope": "cobolit"
	},
	"function-monetary-decimal-point": {
		"prefix": [
			"function monetary-decimal-point"
		],
		"body": [
			"function monetary-decimal-point()$0"
		],
		"description": "character used to separate the integer portion from the fractional part of a monetary currency value according to the current locale",
		"scope": "cobolit"
	},
	"function-monetary-thousands-separator": {
		"prefix": [
			"function monetary-thousands-separator"
		],
		"body": [
			"function monetary-thousands-separator()$0"
		],
		"description": "character used to separate the thousands digit groupings in a monetary currency value according to the current locale",
		"scope": "cobolit"
	},
	"function-national-of": {
		"prefix": [
			"function national-of"
		],
		"body": [
			"function national-of(${1:alphanumeric-string},${2:replacement-char})$0"
		],
		"description": "convert alphanumeric-string to the national coded character set representation",
		"scope": "cobolit"
	},
	"function-numeric-thousands-separator": {
		"prefix": [
			"function numeric-thousands-separator"
		],
		"body": [
			"function numeric-thousands-separator()$0"
		],
		"description": "character used to separate the thousands digit groupings in a numeric value according to the current locale",
		"scope": "cobolit"
	},
	"function-numval": {
		"prefix": [
			"function numval"
		],
		"body": [
			"function numval(${1:string})$0"
		],
		"description": "corresponding numeric value for string",
		"scope": "cobolit"
	},
	"function-numval-c": {
		"prefix": [
			"function numval-c"
		],
		"body": [
			"function numval-c(${1:string},${2:currency-symbol}${3:,ANYCASE})$0"
		],
		"description": "corresponding numeric value for string, case-sensitive if ANYCASE not given",
		"scope": "cobolit"
	},
	"function-numval-f": {
		"prefix": [
			"function numval-f"
		],
		"body": [
			"function numval-f(${1:string})$0"
		],
		"description": "corresponding numeric value for floating-point-string",
		"scope": "cobolit"
	},
	"function-ord": {
		"prefix": [
			"function ord"
		],
		"body": [
			"function ord(${1:char},${2:...})$0"
		],
		"description": "ordinal position in the program character set corresponding to char",
		"scope": "cobolit"
	},
	"function-ord-max": {
		"prefix": [
			"function ord-max"
		],
		"body": [
			"function ord-max(${1:char},${2:...})$0"
		],
		"description": "max. ordinal position in the program character set corresponding to list of chars",
		"scope": "cobolit"
	},
	"function-ord-min": {
		"prefix": [
			"function ord-min"
		],
		"body": [
			"function ord-min(${1:char},${2:...})$0"
		],
		"description": "min. ordinal position in the program character set corresponding to list of chars",
		"scope": "cobolit"
	},
	"function-pi": {
		"prefix": [
			"function pi"
		],
		"body": [
			"function pi()$0"
		],
		"description": "pi",
		"scope": "cobolit"
	},
	"function-present-value": {
		"prefix": [
			"function present-value"
		],
		"body": [
			"function present-value(${1:discount-rate},${2:amount},${3:...})$0"
		],
		"description": "approximation of the present value of a series of future period-end amount",
		"scope": "cobolit"
	},
	"function-random": {
		"prefix": [
			"function random"
		],
		"body": [
			"function random(${1:seed})$0"
		],
		"description": "pseudo-random number 0> <1 from a rectangular distribution with optional seed",
		"scope": "cobolit"
	},
	"function-range": {
		"prefix": [
			"function range"
		],
		"body": [
			"function range(${1:argument},${2:...})$0"
		],
		"description": "value of the maximum argument minus the value of the minimum argument",
		"scope": "cobolit"
	},
	"function-rem": {
		"prefix": [
			"function rem"
		],
		"body": [
			"function rem(${1:number},${2:divisor})$0"
		],
		"description": "remainder of number divided by divisor",
		"scope": "cobolit"
	},
	"function-reverse": {
		"prefix": [
			"function reverse"
		],
		"body": [
			"function reverse(${1:string})$0"
		],
		"description": "reverse representation with same length of string",
		"scope": "cobolit"
	},
	"function-seconds-from-formatted-time": {
		"prefix": [
			"function seconds-from-formatted-time"
		],
		"body": [
			"function seconds-from-formatted-time(${1:format},${2:time})$0"
		],
		"description": "decode time according to format (a time format or a combined date and time format)",
		"scope": "cobolit"
	},
	"function-seconds-past-midnight": {
		"prefix": [
			"function seconds-past-midnight"
		],
		"body": [
			"function seconds-past-midnight()$0"
		],
		"description": "current time of day expressed as the total number of elapsed seconds since midnight",
		"scope": "cobolit"
	},
	"function-sign": {
		"prefix": [
			"function sign"
		],
		"body": [
			"function sign(${1:number})$0"
		],
		"description": "sign representation of number as -1, 0, 1",
		"scope": "cobolit"
	},
	"function-sin": {
		"prefix": [
			"function sin"
		],
		"body": [
			"function sin(${1:angle})$0"
		],
		"description": "trigonometric sine of the specified angle",
		"scope": "cobolit"
	},
	"function-sqrt": {
		"prefix": [
			"function sqrt"
		],
		"body": [
			"function sqrt(${1:number})$0"
		],
		"description": "aproximation of the square root of number",
		"scope": "cobolit"
	},
	"function-tan": {
		"prefix": [
			"function tan"
		],
		"body": [
			"function tan(${1:angle})$0"
		],
		"description": "trigonometric tangent of the specified angle",
		"scope": "cobolit"
	},
	"function-upper-case": {
		"prefix": [
			"function upper-case"
		],
		"body": [
			"function upper-case(${1:string})$0"
		],
		"description": "character string that contains string with any lowercase letters replaced by their corresponding uppercase letters",
		"scope": "cobolit"
	},
	"function-variance": {
		"prefix": [
			"function variance"
		],
		"body": [
			"function variance(${1:number},${2:...})$0"
		],
		"description": "statistical variance of the specified list of number argument",
		"scope": "cobolit"
	},
	"function-year-to-yyyy": {
		"prefix": [
			"function year-to-yyyy"
		],
		"body": [
			"function year-to-yyyy(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0"
		],
		"description": "convert yy to yyyy with optional yy-cutoff to delineate centuries",
		"scope": "cobolit"
	},
	"call": {
		"prefix": "call",
		"body": [
			"call \"$1\" using",
			"    by ${2|value,reference,content|} ${3:identifer}",
			"    returning ${4:return-code}",
			"end-call",
			"$0"
		],
		"description": "CALL literal"
	},
	"FUNCTION-ABS": {
		"prefix": [
			"FUNCTION ABS"
		],
		"body": [
			"FUNCTION ABS(${1:number})$0"
		],
		"description": "function absolute value of number",
		"scope": "cobolit"
	},
	"FUNCTION-ACOS": {
		"prefix": [
			"FUNCTION ACOS"
		],
		"body": [
			"FUNCTION ACOS(${1:cosine})$0"
		],
		"description": "function trigonometric arc-cosine, or inverse cosine, of cosine",
		"scope": "cobolit"
	},
	"FUNCTION-ANNUITY": {
		"prefix": [
			"FUNCTION ANNUITY"
		],
		"body": [
			"FUNCTION ANNUITY(${1:interest-rate},${2:number-of-periods})$0"
		],
		"description": "function annuity",
		"scope": "cobolit"
	},
	"FUNCTION-ASIN": {
		"prefix": [
			"FUNCTION ASIN"
		],
		"body": [
			"FUNCTION ASIN(${1:sine})$0"
		],
		"description": "function trigonometric arc-sine, or inverse sine, of sine",
		"scope": "cobolit"
	},
	"FUNCTION-ATAN": {
		"prefix": [
			"FUNCTION ATAN"
		],
		"body": [
			"FUNCTION ATAN(${1:tangent})$0"
		],
		"description": "function trigonometric arc-tangent, or inverse tangent, of tangent",
		"scope": "cobolit"
	},
	"FUNCTION-BOOLEAN-OF-INTEGER": {
		"prefix": [
			"FUNCTION BOOLEAN-OF-INTEGER"
		],
		"body": [
			"FUNCTION BOOLEAN-OF-INTEGER(${1:integer},${2:length})$0"
		],
		"description": "function boolean item of usage bit representing the binary value of integer; with the given length",
		"scope": "cobolit"
	},
	"FUNCTION-BYTE-LENGTH": {
		"prefix": [
			"FUNCTION BYTE-LENGTH"
		],
		"body": [
			"FUNCTION BYTE-LENGTH(${1:integer})$0"
		],
		"description": "function byte-length (in bytes) of item",
		"scope": "cobolit"
	},
	"FUNCTION-CHAR": {
		"prefix": [
			"FUNCTION CHAR"
		],
		"body": [
			"FUNCTION CHAR(${1:integer})$0"
		],
		"description": "function character in the ordinal position specified by integer, from the current alphanumeric collating sequence",
		"scope": "cobolit"
	},
	"FUNCTION-CHAR-NATIONAL": {
		"prefix": [
			"FUNCTION CHAR-NATIONAL"
		],
		"body": [
			"FUNCTION CHAR-NATIONAL(${1:integer})$0"
		],
		"description": "function character in the ordinal position specified by &lt;integer&gt; from the current national collating sequence",
		"scope": "cobolit"
	},
	"FUNCTION-COMBINED-DATETIME": {
		"prefix": [
			"FUNCTION COMBINED-DATETIME"
		],
		"body": [
			"FUNCTION COMBINED-DATETIME(${1:integer-date},${2:standard-numeric-time})$0"
		],
		"description": "function combines integer-date and standard-numeric-time into a single numeric item from which both date and time components can be derived",
		"scope": "cobolit"
	},
	"FUNCTION-CONCATENATE": {
		"prefix": [
			"function concatenate"
		],
		"body": [
			"function concatenate(${1:string1},${2:string2})$0"
		],
		"description": "function concatenates the string1.. string2 into a single string result",
		"scope": "cobolit"
	},
	"FUNCTION-COS": {
		"prefix": [
			"FUNCTION COS"
		],
		"body": [
			"FUNCTION COS(${1:angle})$0"
		],
		"description": "function trigonometric cosine of angle",
		"scope": "cobolit"
	},
	"FUNCTION-CURRENCY-SYMBOL": {
		"prefix": [
			"FUNCTION CURRENCY-SYMBOL"
		],
		"body": [
			"FUNCTION CURRENCY-SYMBOL()$0"
		],
		"description": "function currency symbol character currently in effect for the locale under which the program is running",
		"scope": "cobolit"
	},
	"FUNCTION-CURRENT-DATE": {
		"prefix": [
			"FUNCTION CURRENT-DATE"
		],
		"body": [
			"FUNCTION CURRENT-DATE(${1:date-and-time-format})$0"
		],
		"description": "function current date and time as 21-character value",
		"scope": "cobolit"
	},
	"FUNCTION-FORMATTED-DATE": {
		"prefix": [
			"FUNCTION FORMATTED-DATE"
		],
		"body": [
			"FUNCTION FORMATTED-DATE(${1:date-format},${2:integer-date})$0"
		],
		"description": "function formatted-date",
		"scope": "cobolit"
	},
	"FUNCTION-FORMATTED-DATETIME": {
		"prefix": [
			"FUNCTION FORMATTED-DATETIME"
		],
		"body": [
			"FUNCTION FORMATTED-DATETIME(${1:date-and-time-format},${2:integer-date},${3:standard-numeric-time},${4:offset_or_system_offset})$0"
		],
		"description": "function formatted-datetime",
		"scope": "cobolit"
	},
	"function-formatted-time": {
		"prefix": [
			"function formatted-time"
		],
		"body": [
			"function formatted-time(${1:time-format},${2:standard-numeric-time},${3:offset_or_system_offset})$0"
		],
		"description": "function formatted-time",
		"scope": "cobolit"
	},
	"FUNCTION-FRACTION-PART": {
		"prefix": [
			"FUNCTION FRACTION-PART"
		],
		"body": [
			"FUNCTION FRACTION-PART(${1:number})$0"
		],
		"description": "portion of number that occurs to the right of the decimal point",
		"scope": "cobolit"
	},
	"FUNCTION-HIGHEST-ALGEBRAIC": {
		"prefix": [
			"FUNCTION HIGHEST-ALGEBRAIC"
		],
		"body": [
			"FUNCTION HIGHEST-ALGEBRAIC(${1:numeric-identifier})$0"
		],
		"description": "highest value that could possibly be stored in the specified numeric-identifier",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER": {
		"prefix": [
			"FUNCTION INTEGER"
		],
		"body": [
			"FUNCTION INTEGER(${1:number})$0"
		],
		"description": "greatest integer value that is less than or equal to number",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER-OF-BOOLEAN": {
		"prefix": [
			"FUNCTION INTEGER-OF-BOOLEAN"
		],
		"body": [
			"FUNCTION INTEGER-OF-BOOLEAN(${1:boolean-item})$0"
		],
		"description": "numeric value of boolean-item",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER-OF-DATE": {
		"prefix": [
			"FUNCTION INTEGER-OF-DATE"
		],
		"body": [
			"FUNCTION INTEGER-OF-DATE(${1:yyyymmdd})$0"
		],
		"description": "converts yyyymmdd to an internal integer-date",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER-OF-DAY": {
		"prefix": [
			"FUNCTION INTEGER-OF-DAY"
		],
		"body": [
			"FUNCTION INTEGER-OF-DAY(${1:yyyymmdd})$0"
		],
		"description": "converts yyyymmdd to an internal integer-day",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER-OF-FORMATTED-DATE": {
		"prefix": [
			"FUNCTION INTEGER-OF-FORMATTED-DATE"
		],
		"body": [
			"FUNCTION INTEGER-OF-FORMATTED-DATE(${1:format},${2:date})$0"
		],
		"description": "converts date in specified format to an internal integer",
		"scope": "cobolit"
	},
	"FUNCTION-INTEGER-PART": {
		"prefix": [
			"FUNCTION INTEGER-PART"
		],
		"body": [
			"FUNCTION INTEGER-PART(${1:number})$0"
		],
		"description": "portion of number that occurs to the left of the decimal point",
		"scope": "cobolit"
	},
	"FUNCTION-LENGTH": {
		"prefix": [
			"FUNCTION LENGTH"
		],
		"body": [
			"FUNCTION LENGTH(${1:item})$0"
		],
		"description": "returns the length (in character positions) of the specified item",
		"scope": "cobolit"
	},
	"FUNCTION-LENGTH-AN": {
		"prefix": [
			"FUNCTION LENGTH-AN"
		],
		"body": [
			"FUNCTION LENGTH-AN(${1:item})$0"
		],
		"description": "returns the length (in bytes) of the specified item;",
		"scope": "cobolit"
	},
	"FUNCTION-LOCALE-COMPARE": {
		"prefix": [
			"FUNCTION LOCALE-COMPARE"
		],
		"body": [
			"FUNCTION LOCALE-COMPARE(${1:argument1},${2:argument2},${3:locale-optional})$0"
		],
		"description": "character '=' or '<' or '>' indicating the result of comparing argument1 and argument2 using a culturall",
		"scope": "cobolit"
	},
	"FUNCTION-LOCALE-DATE": {
		"prefix": [
			"FUNCTION LOCALE-DATE"
		],
		"body": [
			"FUNCTION LOCALE-DATE(${1:yyyymmdd},${2:locale-optional})$0"
		],
		"description": "format yyyymmd; according to locale",
		"scope": "cobolit"
	},
	"FUNCTION-LOCALE-TIME": {
		"prefix": [
			"FUNCTION LOCALE-TIME"
		],
		"body": [
			"FUNCTION LOCALE-TIME(${1:yyyymmdd},${2:locale-optional})$0"
		],
		"description": "format time; according to locale",
		"scope": "cobolit"
	},
	"FUNCTION-LOCALE-TIME-FROM-SECONDS": {
		"prefix": [
			"FUNCTION LOCALE-TIME-FROM-SECONDS"
		],
		"body": [
			"FUNCTION LOCALE-TIME-FROM-SECONDS(${1:integer-time},${2:locale-optional})$0"
		],
		"description": "format integer-time (internal-format) according to locale",
		"scope": "cobolit"
	},
	"FUNCTION-LOG": {
		"prefix": [
			"FUNCTION LOG"
		],
		"body": [
			"FUNCTION LOG(${1:number})$0"
		],
		"description": "format base e logarithm of number",
		"scope": "cobolit"
	},
	"FUNCTION-LOG10": {
		"prefix": [
			"FUNCTION LOG10"
		],
		"body": [
			"FUNCTION LOG10(${1:number})$0"
		],
		"description": "format base 10 logarithm of number",
		"scope": "cobolit"
	},
	"FUNCTION-LOWERCASE": {
		"prefix": [
			"FUNCTION LOWERCASE"
		],
		"body": [
			"FUNCTION LOWERCASE(${1:string})$0"
		],
		"description": "character string that contains string with any uppercase letters replaced by their corresponding lowercase letters",
		"scope": "cobolit"
	},
	"FUNCTION-LOWEST-ALGEBRAIC": {
		"prefix": [
			"FUNCTION LOWEST-ALGEBRAIC"
		],
		"body": [
			"FUNCTION LOWEST-ALGEBRAIC(${1:numeric-identifier})$0"
		],
		"description": "lowest value that could possibly be stored in the specified numeric-identifier",
		"scope": "cobolit"
	},
	"FUNCTION-MAX": {
		"prefix": [
			"FUNCTION MAX"
		],
		"body": [
			"FUNCTION MAX(${1:number},${2:...})$0"
		],
		"description": "Alphanumeric/Index/Integer/National/Numeric maximum value from the specified list of numbers",
		"scope": "cobolit"
	},
	"FUNCTION-MEAN": {
		"prefix": [
			"FUNCTION MEAN"
		],
		"body": [
			"FUNCTION MEAN(${1:number},${2:...})$0"
		],
		"description": "statistical mean value of the specified list of numbers",
		"scope": "cobolit"
	},
	"FUNCTION-MEDIAN": {
		"prefix": [
			"FUNCTION MEDIAN"
		],
		"body": [
			"FUNCTION MEDIAN(${1:number},${2:...})$0"
		],
		"description": "statistical median value of the specified list of numbers",
		"scope": "cobolit"
	},
	"FUNCTION-MIDRANGE": {
		"prefix": [
			"FUNCTION MIDRANGE"
		],
		"body": [
			"FUNCTION MIDRANGE(${1:number},${2:...})$0"
		],
		"description": "statistical midrange value of the specified list of numbers",
		"scope": "cobolit"
	},
	"FUNCTION-MIN": {
		"prefix": [
			"FUNCTION MIN"
		],
		"body": [
			"FUNCTION MIN(${1:number},${2:...})$0"
		],
		"description": "statistical min value of the specified list of numbers",
		"scope": "cobolit"
	},
	"FUNCTION-MOD": {
		"prefix": [
			"FUNCTION MOD"
		],
		"body": [
			"FUNCTION MOD(${1:value},${2:modulus})$0"
		],
		"description": "remainder from the division of value by modulus",
		"scope": "cobolit"
	},
	"FUNCTION-MONETARY-DECIMAL-POINT": {
		"prefix": [
			"FUNCTION MONETARY-DECIMAL-POINT"
		],
		"body": [
			"FUNCTION MONETARY-DECIMAL-POINT()$0"
		],
		"description": "character used to separate the integer portion from the fractional part of a monetary currency value according to the current locale",
		"scope": "cobolit"
	},
	"FUNCTION-MONETARY-THOUSANDS-SEPARATOR": {
		"prefix": [
			"FUNCTION MONETARY-THOUSANDS-SEPARATOR"
		],
		"body": [
			"FUNCTION MONETARY-THOUSANDS-SEPARATOR()$0"
		],
		"description": "character used to separate the thousands digit groupings in a monetary currency value according to the current locale",
		"scope": "cobolit"
	},
	"FUNCTION-NATIONAL-OF": {
		"prefix": [
			"FUNCTION NATIONAL-OF"
		],
		"body": [
			"FUNCTION NATIONAL-OF(${1:alphanumeric-string},${2:replacement-char})$0"
		],
		"description": "convert alphanumeric-string to the national coded character set representation",
		"scope": "cobolit"
	},
	"FUNCTION-NUMERIC-THOUSANDS-SEPARATOR": {
		"prefix": [
			"FUNCTION NUMERIC-THOUSANDS-SEPARATOR"
		],
		"body": [
			"FUNCTION NUMERIC-THOUSANDS-SEPARATOR()$0"
		],
		"description": "character used to separate the thousands digit groupings in a numeric value according to the current locale",
		"scope": "cobolit"
	},
	"FUNCTION-NUMVAL": {
		"prefix": [
			"FUNCTION NUMVAL"
		],
		"body": [
			"FUNCTION NUMVAL(${1:string})$0"
		],
		"description": "corresponding numeric value for string",
		"scope": "cobolit"
	},
	"FUNCTION-NUMVAL-C": {
		"prefix": [
			"FUNCTION NUMVAL-C"
		],
		"body": [
			"FUNCTION NUMVAL-C(${1:string},${2:currency-symbol}${3:,ANYCASE})$0"
		],
		"description": "corresponding numeric value for string, case-sensitive if ANYCASE not given",
		"scope": "cobolit"
	},
	"FUNCTION-NUMVAL-F": {
		"prefix": [
			"FUNCTION NUMVAL-F"
		],
		"body": [
			"FUNCTION NUMVAL-F(${1:string})$0"
		],
		"description": "corresponding numeric value for floating-point-string",
		"scope": "cobolit"
	},
	"FUNCTION-ORD": {
		"prefix": [
			"FUNCTION ORD"
		],
		"body": [
			"FUNCTION ORD(${1:char},${2:...})$0"
		],
		"description": "ordinal position in the program character set corresponding to char",
		"scope": "cobolit"
	},
	"FUNCTION-ORD-MAX": {
		"prefix": [
			"FUNCTION ORD-MAX"
		],
		"body": [
			"FUNCTION ORD-MAX(${1:char},${2:...})$0"
		],
		"description": "max. ordinal position in the program character set corresponding to list of chars",
		"scope": "cobolit"
	},
	"FUNCTION-ORD-MIN": {
		"prefix": [
			"FUNCTION ORD-MIN"
		],
		"body": [
			"FUNCTION ORD-MIN(${1:char},${2:...})$0"
		],
		"description": "min. ordinal position in the program character set corresponding to list of chars",
		"scope": "cobolit"
	},
	"FUNCTION-PI": {
		"prefix": [
			"PI",
			"FUNCTION PI"
		],
		"body": [
			"FUNCTION PI()$0"
		],
		"description": "pi",
		"scope": "cobolit"
	},
	"FUNCTION-PRESENT-VALUE": {
		"prefix": [
			"FUNCTION PRESENT-VALUE"
		],
		"body": [
			"FUNCTION PRESENT-VALUE(${1:discount-rate},${2:amount},${3:...})$0"
		],
		"description": "approximation of the present value of a series of future period-end amount",
		"scope": "cobolit"
	},
	"FUNCTION-RANDOM": {
		"prefix": [
			"FUNCTION RANDOM"
		],
		"body": [
			"FUNCTION RANDOM(${1:seed})$0"
		],
		"description": "pseudo-random number 0> <1 from a rectangular distribution with optional seed",
		"scope": "cobolit"
	},
	"FUNCTION-RANGE": {
		"prefix": [
			"FUNCTION RANGE"
		],
		"body": [
			"FUNCTION RANGE(${1:argument},${2:...})$0"
		],
		"description": "value of the maximum argument minus the value of the minimum argument",
		"scope": "cobolit"
	},
	"FUNCTION-REM": {
		"prefix": [
			"FUNCTION REM"
		],
		"body": [
			"FUNCTION REM(${1:number},${2:divisor})$0"
		],
		"description": "remainder of number divided by divisor",
		"scope": "cobolit"
	},
	"FUNCTION-REVERSE": {
		"prefix": [
			"FUNCTION REVERSE"
		],
		"body": [
			"FUNCTION REVERSE(${1:string})$0"
		],
		"description": "reverse representation with same length of string",
		"scope": "cobolit"
	},
	"FUNCTION-SECONDS-FROM-FORMATTED-TIME": {
		"prefix": [
			"FUNCTION SECONDS-FROM-FORMATTED-TIME"
		],
		"body": [
			"FUNCTION SECONDS-FROM-FORMATTED-TIME(${1:format},${2:time})$0"
		],
		"description": "decode time according to format (a time format or a combined date and time format)",
		"scope": "cobolit"
	},
	"FUNCTION-SECONDS-PAST-MIDNIGHT": {
		"prefix": [
			"FUNCTION SECONDS-PAST-MIDNIGHT"
		],
		"body": [
			"FUNCTION SECONDS-PAST-MIDNIGHT()$0"
		],
		"description": "current time of day expressed as the total number of elapsed seconds since midnight",
		"scope": "cobolit"
	},
	"FUNCTION-SIGN": {
		"prefix": [
			"FUNCTION SIGN"
		],
		"body": [
			"FUNCTION SIGN(${1:number})$0"
		],
		"description": "sign representation of number as -1, 0, 1",
		"scope": "cobolit"
	},
	"FUNCTION-SIN": {
		"prefix": [
			"FUNCTION SIN"
		],
		"body": [
			"FUNCTION SIN(${1:angle})$0"
		],
		"description": "trigonometric sine of the specified angle",
		"scope": "cobolit"
	},
	"FUNCTION-SQRT": {
		"prefix": [
			"FUNCTION SQRT"
		],
		"body": [
			"FS",
			"FUNCTION SQRT(${1:number})$0"
		],
		"description": "aproximation of the square root of number",
		"scope": "cobolit"
	},
	"FUNCTION-TAN": {
		"prefix": [
			"FUNCTION TAN"
		],
		"body": [
			"FT",
			"FUNCTION TAN(${1:angle})$0"
		],
		"description": "trigonometric tangent of the specified angle",
		"scope": "cobolit"
	},
	"FUNCTION-UPPER-CASE": {
		"prefix": [
			"FU",
			"FUNCTION UPPER-CASE"
		],
		"body": [
			"FUNCTION UPPER-CASE(${1:string})$0"
		],
		"description": "character string that contains string with any lowercase letters replaced by their corresponding uppercase letters",
		"scope": "cobolit"
	},
	"FUNCTION-VARIANCE": {
		"prefix": [
			"FUNCTION VARIANCE"
		],
		"body": [
			"FUNCTION VARIANCE(${1:number},${2:...})$0"
		],
		"description": "statistical variance of the specified list of number argument",
		"scope": "cobolit"
	},
	"FUNCTION-YEAR-TO-YYYY": {
		"prefix": [
			"FY",
			"FUNCTION YEAR-TO-YYYY"
		],
		"body": [
			"FUNCTION YEAR-TO-YYYY(${1:yy},${2:[yy-cutoff, default: 50},${3:yy-execution-time, default: now})$0"
		],
		"description": "convert yy to yyyy with optional yy-cutoff to delineate centuries",
		"scope": "cobolit"
	},
	"CALL": {
		"prefix": "CALL",
		"body": [
			"CALL \"$1\" USING",
			"    BY ${2|VALUE,REFERENCE,CONTENT|} ${3:IDENTIFER}",
			"    RETURNING ${4:RETURN-CODE}",
			"END-CALL",
			"$0"
		],
		"description": "CALL literal"
	},
	"cancel": {
		"prefix": "cancel",
		"body": [
			"cancel \"$1\"",
			"$0"
		],
		"description": "CANCEL literal"
	},
	"CANCEL": {
		"prefix": "CANCEL",
		"body": [
			"CANCEL \"$1\"",
			"$0"
		],
		"description": "CANCEL literal"
	},
	"exit program": {
		"prefix": [
			"ep",
			"exit"
		],
		"body": [
			"exit program returning ${1:item}"
		],
		"description": "EXIT PROGRAM"
	},
	"EXIT PROGRAM": {
		"prefix": [
			"EP",
			"EXIT"
		],
		"body": [
			"EXIT PROGRAM RETURNING ${1:item}"
		],
		"description": "EXIT PROGRAM"
	},
	"IDENTIFICATION DIVISION": {
		"prefix": [
			"ID",
			"IDENTIFICATION DIVISION"
		],
		"body": [
			"IDENTIFICATION DIVISION.",
			"$0"
		],
		"scope": "cobolit"
	},
	"identification division": {
		"prefix": [
			"id",
			"identification division"
		],
		"body": [
			"identification division.",
			"$0"
		],
		"scope": "cobolit"
	},
	"environment division": {
		"prefix": [
			"ed",
			"environment division"
		],
		"body": [
			"environment division.",
			"$0"
		]
	},
	"ENVIRONMENT DIVISION": {
		"prefix": [
			"ED",
			"ENVIRONMENT DIVISION"
		],
		"body": [
			"ENVIRONMENT DIVISION.",
			"$0"
		]
	},
	"DATA DIVISION": {
		"prefix": [
			"DD",
			"DATA DIVISION"
		],
		"body": [
			"DATA DIVISION.",
			"$0"
		]
	},
	"data division": {
		"prefix": [
			"dd",
			"data division"
		],
		"body": [
			"data division.",
			"$0"
		],
		"scope": "cobolit"
	},
	"WORKING-STORAGE SECTION": {
		"prefix": [
			"WS",
			"WORKING-STORAGE"
		],
		"body": [
			"WORKING-STORAGE SECTION.",
			"$0"
		]
	},
	"working-storage section": {
		"prefix": [
			"ws",
			"working-storage"
		],
		"body": [
			"working-storage section.",
			"$0"
		],
		"scope": "cobolit"
	},
	"local-storage section": {
		"prefix": [
			"ls",
			"local-storage"
		],
		"body": [
			"local-storage section.",
			"$0"
		]
	},
	"LINKAGE SECTION ": {
		"prefix": [
			"LS",
			"LKS",
			"LINKAGE SECTION"
		],
		"body": [
			"LINKAGE SECTION.",
			"$0"
		],
		"scope": "cobolit"
	},
	"linkage section.": {
		"prefix": [
			"ls",
			"lks",
			"linkage section"
		],
		"body": [
			"linkage section.",
			"$0"
		]
	},
	"PROCEDURE DIVISION": {
		"prefix": [
			"PD",
			"PROCEDURE DIVISION"
		],
		"body": [
			"PROCEDURE DIVISION.",
			"$0"
		]
	},
	"procedure division": {
		"prefix": [
			"pd",
			"procedure division"
		],
		"body": [
			"procedure division.",
			"$0"
		],
		"scope": "cobolit"
	},
	"PROGRAM-ID": {
		"prefix": [
			"PI",
			"PROGRAM-ID. PRG."
		],
		"body": [
			"PROGRAM-ID. ${1:${TM_FILENAME/(.*)\\..+$/${1:/upcase}/}}.",
			"$0"
		],
		"scope": "cobolit"
	},
	"program-id": {
		"prefix": [
			"pi",
			"program-id. prg."
		],
		"body": [
			"program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"$0"
		],
		"scope": "cobolit"
	}
}