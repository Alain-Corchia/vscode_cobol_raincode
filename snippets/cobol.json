{
	"class-id": {
		"prefix": "class-id",
		"body": [
			"       class-id $1 ${3|public,private|}.",
			"",
			"       method-id new public.",
			"       procedure division.",
			"           $0",
			"           exit method.",
			"       end method.",
			"",
			"       end class."
		],
		"description": "class with ctor",
		"scope": "cobol"
	},
	"enum-id": {
		"prefix": [
			"enum-id",
			"ei"
		],
		"body": [
			"*>> <summary>enum-id $1</summary>",
			"enum-id. $1 as \"Status\".",
			"    78 ${2:Item}  value ${3:1}.",
			"end enum $1.",
			""
		],
		"description": "enum-id",
		"scope": "cobol"
	},
	"exec-sql": {
		"prefix": "exec",
		"body": [
			"exec sql include sqlca end-exec."
		],
		"description": "exec sql include",
		"scope": "cobol"
	},
	"exec-sql-begin": {
		"prefix": "exec",
		"body": [
			"exec sql begin declare section end-exec.",
			"$0",
			"exec sql end declare section end-exec."
		],
		"description": "exec sql declare",
		"scope": "cobol"
	},
	"main method-id": {
		"prefix": "main",
		"body": [
			"*>> <summary>method main</summary>",
			"method-id main public static.",
			"procedure division using",
			"           by value args as string occurs any.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id (main)",
		"scope": "cobol"
	},
	"method-id": {
		"prefix": [
			"method-id",
			"mi"
		],
		"body": [
			"*>> <summary>method $1</summary>",
			"method-id $1.",
			"procedure division.",
			"    $0",
			"end method.",
			""
		],
		"description": "method-id",
		"scope": "cobol"
	},
	"MFUnit Test": {
		"prefix": "mfu,program-id",
		"body": [
			"       program-id. MFUT_${1:${TM_FILENAME_BASE/MFUT[_](.*)/$1/}}.",
			"       working-storage section.",
			"       copy \"mfunit.cpy\".",
			"",
			"       01 test-fail-count     binary-long value 0.",
			"",
			"       *> Testcase     : $1",
			"       *>  Description : $2",
			"       procedure division.",
			"           $0",
			"           if 1 not equal 1",
			"               display \"Odd... 1 not equal 1?\"",
			"               add 1 to test-fail-count",
			"           end-if",
			"",
			"           if test-fail-count not equal 0",
			"               call \"MFU_ASSERT_FAIL_Z\" using",
			"                    by reference z\"$1 has failed\"",
			"               end-call",
			"           end-if",
			"",
			"           goback returning test-fail-count.",
			"",
			"       *> Startup for testcase $1",
			"       entry \"MFUS_$1\".",
			"           *> Open any files",
			"           goback.",
			"",
			"       *> Teardown for testcase $1",
			"       entry \"MFUE_$1\".",
			"           *> Close any files/delete any temp files",
			"           goback.",
			"",
			"       *> Metadata for testcase $1",
			"       entry \"MFUM_$1\".",
			"           move \"$2\" to MFU-MD-TESTCASE-DESCRIPTION",
			"           goback.",
			"       end program."
		],
		"description": "MFUNIT skelton program",
		"scope": "cobol"
	},
	"IDENTIFICATION (CICS)": {
		"prefix": "IDENTIFICATION",
		"body": [
			"        IDENTIFICATION DIVISION. ",
			"        PROGRAM-ID. $1.",
			"        DATA DIVISION.",
			"        WORKING-STORAGE SECTION. ",
			"        01 OUT-MSG.",
			"         02 FILLER PIC X(6) VALUE \"Hello \". ",
			"         02 MSG    PIC X(20).",
			"        01 INP-MSG PIC X(20) VALUE \"What is your name? \".     ",
			"        PROCEDURE DIVISION.",
			"        PARA1.",
			"            EXEC CICS",
			"                 SEND FROM(INP-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RECEIVE INTO (MSG)",
			"            END-EXEC",
			"",
			"       *",
			"            EXEC CICS",
			"                 SEND FROM (OUT-MSG)",
			"                 ERASE",
			"            END-EXEC",
			"",
			"            EXEC CICS",
			"                 RETURN",
			"            END-EXEC.",
			"",
			"       *",
			"        END PROGRAM $1.",
			""
		],
		"description": "Template for program (CICS)",
		"scope": "cobol"
	},
	"Minimum Line Sequential": {
		"prefix": "identification",
		"body": [
			"       identification division.",
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       input-output section.",
			"        file-control.",
			"        select ${2:cust} assign to '${4:$2}.txt'",
			"        organization is line sequential.            ",
			"",
			"       data division.",
			"       file section.",
			"       fd $2.",
			"       01 ${3:$2-file}.",
			"        03 ${5:customer-id}    pic 9(5).",
			"        03 ${6:customer-info}  pic x(65).",
			"",
			"       working-storage section.",
			"       01 ws-eof       pic a. ",
			"",
			"       procedure division.",
			"          open input $2.",
			"             perform until ws-eof='Y'",
			"                read $2",
			"                   at end",
			"                      move 'Y' to ws-eof",
			"                   not at end",
			"                      display ${5} \" => \" ${6}",
			"                end-read",
			"             end-perform",
			"          close $2.",
			"          $0",
			"          goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template File/Seq",
		"scope": "cobol"
	},
	"Minimum mainframe program [uppercase]": {
		"prefix": "IDENTIFICATION",
		"body": [
			"       IDENTIFICATION DIVISION.",
			"       PROGRAM-ID. ${1:${1:${TM_FILENAME/(.*)\\..+$/$1/}}}.",
			"       AUTHOR. $2.",
			"       INSTALLATION.  ${3:where}.",
			"       DATE-WRITTEN.  ${4:$CURRENT_DATE/$CURRENT_MONTH/$CURRENT_YEAR}.",
			"       DATE-COMPILED. ${5:$4}.",
			"       SECURITY.",
			"       ENVIRONMENT DIVISION.",
			"       CONFIGURATION SECTION.",
			"       SOURCE-COMPUTER. ${6:pc}.",
			"       OBJECT-COMPUTER. ${7:${6}}.",
			"       SPECIAL-NAMES.",
			"       INPUT-OUTPUT SECTION.",
			"       FILE-CONTROL.",
			"       DATA DIVISION.",
			"        FILE SECTION.",
			"        WORKING-STORAGE SECTION.",
			"        LINKAGE SECTION.",
			"       PROCEDURE DIVISION.",
			"        DECLARATIVES.",
			"        END DECLARATIVES.",
			"        main-processing SECTION.",
			"         mainline-paragraph.",
			"             $0",
			"             STOP RUN."
		],
		"description": "Template for mainframe",
		"scope": "cobol"
	},
	"Skelton program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"",
			"       environment division.",
			"       configuration section.",
			"",
			"       data division.",
			"       working-storage section.",
			"",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Small template for program",
		"scope": "cobol"
	},
	"Minimum program": {
		"prefix": "program-id",
		"body": [
			"       program-id. ${1:${TM_FILENAME/(.*)\\..+$/$1/}}.",
			"       procedure division.",
			"           $0",
			"           goback.",
			"",
			"       end program $1.",
			""
		],
		"description": "Minimum template",
		"scope": "cobol"
	},
	"property": {
		"prefix": "property",
		"body": [
			"01 ${2:_prop} ${3:binary-long} private.",
			"method-id. get property #${1:Prop}.",
			"procedure division returning ret as ${3:binary-long}.",
			"    set ret to ${2:_prop}",
			"end method.",
			"method-id. set property #${1:Prop}.",
			"procedure division using by value val as ${3:binary-long}.",
			"    set ${2:_prop} to 0",
			"end method.",
			""
		],
		"description": "set/get property",
		"scope": "cobol"
	},
	"try": {
		"prefix": "try",
		"body": [
			"try",
			"$2",
			"catch ${1:Exception}",
			"$0",
			"end-try"
		],
		"description": "try catch",
		"scope": "cobol"
	},
	"valuetype": {
		"prefix": [
			"vi",
			"valuetype-id"
		],
		"body": [
			"valuetype-id $1 ${2:public}.",
			"01 item string ${2:public}.",
			"",
			"method-id new ${2:public}.",
			"procedure division.",
			"   $0",
			"end method.",
			"",
			"end valuetype."
		],
		"description": "valuetype",
		"scope": "cobol"
	},
	"selection-to-perform-section": {
		"prefix": "perform",
		"body": [
			"$1 section.",
			"   $TM_SELECTED_TEXT",
			"$1-end section.",
			"   exit section."
		],
		"description": "Create 'perform section' from selection",
		"scope": "cobol"
	},
	"dialect": {
		"prefix": "$set",
		"body": [
			"\\$set dialect\"${2|ans85,bs2000,bs2000-offload,cob370,cob371,cob372,mf,mvs,os390,osvs,vsc21,vsc22,vsc23,vsc24|}\"",
			"$0"
		]
	},
	"sourceformat": {
		"prefix": "$set",
		"body": [
			"\\$set sourceformat\"${2|free,variable,fixed|}\"",
			"$0"
		],
		"scope": "cobol"
	}
}